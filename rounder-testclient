#!/usr/bin/env python

#   Rounder - Poker for the GNOME Desktop
#
#   Copyright (C) 2006 Devan Goodwin <dgoodwin@dangerouslyinc.com>
#   Copyright (C) 2006 James Bowes <jbowes@dangerouslyinc.com>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
#   02110-1301  USA

import sys
sys.path.insert(0, './src/')
import random

from optparse import OptionParser

from rounder.log import setup_logging
# Configure logging: (needs to be done before importing our modules)
log_conf_locations = ["./logging.conf"]
setup_logging(log_conf_locations)

from rounder.action import Raise
from rounder.network.client import RounderNetworkClient
from rounder.network.server import SERVER_PORT
from rounder.network.serialize import register_message_classes

class TestClientUI:

    """ 
    Test UI implementation.
    """

    def __init__(self, username, password, interactive):

        self.username = username
        self.password = password
        self.interactive = interactive
        self.client = RounderNetworkClient(self)
        self.client.connect('localhost', SERVER_PORT, self.username, 
            self.password)

    def connected(self):
        print "Connected!"
        tables = self.client.get_table_list()

    def got_table_list(self, tables):
        print "got list of tables:"
        for t in tables:
            print "   %s" % t[1]

        # Attempt to open the first table:
        self.client.open_table(tables[0][0])

    def table_opened(self, table_state):
        table_state.print_state()
        # Find and take the first available seat:
        for i in range(10):
            if table_state.seats[i] == None:
                self.client.take_seat(table_state.id, i)
                break

    def took_seat(self, table_id, seat_num):
        if self.interactive:
            self.client.start_game(table_id)

    def prompt(self, table_id, actions):
        """ 
        Choose one of the actions in the given list, return it's index and any
        parameters required.
        """
        r = random.randint(0, len(actions) - 1)
        random_action = actions[r]
        params = []
        if isinstance(random_action, Raise):
            params.append(str(random_action.min_bet))
        self.client.act(table_id, r, params)



if __name__ == '__main__':
    register_message_classes()
    parser = OptionParser()
    parser.add_option("-u", "--username", dest="username",
        help="username on the server")
    parser.add_option("-p", "--password", dest="password",
        help="password on the server")
    parser.add_option("-i", "--interactive", action="store_true", 
        dest="interactive", help="interactively drive the action")
    parser.set_defaults(drive=False)

    (options, args) = parser.parse_args()
    ui = TestClientUI(options.username, options.password, options.interactive)

